// <auto-generated />
using System;
using DropWord.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DropWord.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241024204005_add-AutoChatAnalyzeHistory-table")]
    partial class addAutoChatAnalyzeHistorytable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DropWord.Domain.Entities.AnalyticsUserActionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AnalyticsUserAction", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatAnalysisHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoChatDataId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastAnalyzeAutoChatHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("TextAnalysis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AutoChatAnalyzeHistory", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatBotEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("AutoChatBot", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatDataEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoChatBotId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AutoChatBotId");

                    b.HasIndex("UserId");

                    b.ToTable("AutoChatData", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoChatDataId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageTypeEnum")
                        .HasColumnType("int");

                    b.Property<int>("SenderEnum")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AutoChatDataId");

                    b.ToTable("AutoChatHistory", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.FeedbackEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewConnectionSentenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RecommendedNewFirstSentenceId")
                        .HasColumnType("int");

                    b.Property<int>("RecommendedNewSecondSentenceId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RecommendedNewFirstSentenceId");

                    b.HasIndex("RecommendedNewSecondSentenceId");

                    b.ToTable("RecommendedNewConnectionSentence", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewConnectionWithUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RecommendedNewConnectionSentenceId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RecommendedNewConnectionSentenceId");

                    b.HasIndex("UserId");

                    b.ToTable("RecommendedNewConnectionWithUser", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewFirstSentenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RecommendedNewFirstSentence", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewSecondSentenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RecommendedNewSecondSentence", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.SentenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sentence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Sentence", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.SentencesPairEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstSentenceId")
                        .HasColumnType("int");

                    b.Property<string>("SecondLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondSentenceId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("FirstSentenceId");

                    b.HasIndex("SecondSentenceId");

                    b.HasIndex("UserId");

                    b.ToTable("SentencesPair", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.StateTreeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonTempData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StateTree", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserLearningInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountUseForDaySentences")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastUseForDaySentencesId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLearningInfo", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserSentencesCollectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSentencesCollection", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserSettingsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("InterfaceLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LearnLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LearnSentencesModeEnum")
                        .HasColumnType("int");

                    b.Property<string>("MainLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentencesRepeatForDayModeEnum")
                        .HasColumnType("int");

                    b.Property<int>("SentencesRepeatForDayTimesModeEnum")
                        .HasColumnType("int");

                    b.Property<int>("TimeZone")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UsingSentencesPairEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountUse")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsLearning")
                        .HasColumnType("bit");

                    b.Property<int?>("SentencesPairId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("WhenDeleted")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SentencesPairId");

                    b.HasIndex("UserId");

                    b.ToTable("UsingSentencesPair", (string)null);
                });

            modelBuilder.Entity("SentencesPairEntityUserSentencesCollectionEntity", b =>
                {
                    b.Property<int>("SentencesPairsId")
                        .HasColumnType("int");

                    b.Property<int>("UserSentencesCollectionsId")
                        .HasColumnType("int");

                    b.HasKey("SentencesPairsId", "UserSentencesCollectionsId");

                    b.HasIndex("UserSentencesCollectionsId");

                    b.ToTable("SentencesPairEntityUserSentencesCollectionEntity", (string)null);
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatAnalysisHistoryEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatDataEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.AutoChatBotEntity", "AutoChatBot")
                        .WithMany("AutoChatDates")
                        .HasForeignKey("AutoChatBotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany("AutoChatDates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AutoChatBot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatHistoryEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.AutoChatDataEntity", "AutoChatData")
                        .WithMany("AutoChatHistories")
                        .HasForeignKey("AutoChatDataId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AutoChatData");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewConnectionSentenceEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.RecommendedNewFirstSentenceEntity", "RecommendedNewFirstSentence")
                        .WithMany("RecommendedNewConnectionSentences")
                        .HasForeignKey("RecommendedNewFirstSentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.RecommendedNewSecondSentenceEntity", "RecommendedNewSecondSentence")
                        .WithMany("RecommendedNewConnectionSentences")
                        .HasForeignKey("RecommendedNewSecondSentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecommendedNewFirstSentence");

                    b.Navigation("RecommendedNewSecondSentence");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewConnectionWithUserEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.RecommendedNewConnectionSentenceEntity", "RecommendedNewConnectionSentence")
                        .WithMany("RecommendedNewConnectionWithUsers")
                        .HasForeignKey("RecommendedNewConnectionSentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany("RecommendedNewConnectionWithUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecommendedNewConnectionSentence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.SentencesPairEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.SentenceEntity", "FirstSentence")
                        .WithMany("FirstSentencesPairs")
                        .HasForeignKey("FirstSentenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.SentenceEntity", "SecondSentence")
                        .WithMany("SecondSentencesPairs")
                        .HasForeignKey("SecondSentenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany("SentencesPairs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FirstSentence");

                    b.Navigation("SecondSentence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.StateTreeEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithOne("StateTree")
                        .HasForeignKey("DropWord.Domain.Entities.StateTreeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserLearningInfoEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithOne("UserLearningInfo")
                        .HasForeignKey("DropWord.Domain.Entities.UserLearningInfoEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserSentencesCollectionEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany("UserSentencesCollections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserSettingsEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("DropWord.Domain.Entities.UserSettingsEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UsingSentencesPairEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.SentencesPairEntity", "SentencesPair")
                        .WithMany("UsingSentencesPairs")
                        .HasForeignKey("SentencesPairId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DropWord.Domain.Entities.UserEntity", "User")
                        .WithMany("UsingSentencesPairs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SentencesPair");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SentencesPairEntityUserSentencesCollectionEntity", b =>
                {
                    b.HasOne("DropWord.Domain.Entities.SentencesPairEntity", null)
                        .WithMany()
                        .HasForeignKey("SentencesPairsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DropWord.Domain.Entities.UserSentencesCollectionEntity", null)
                        .WithMany()
                        .HasForeignKey("UserSentencesCollectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatBotEntity", b =>
                {
                    b.Navigation("AutoChatDates");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.AutoChatDataEntity", b =>
                {
                    b.Navigation("AutoChatHistories");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewConnectionSentenceEntity", b =>
                {
                    b.Navigation("RecommendedNewConnectionWithUsers");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewFirstSentenceEntity", b =>
                {
                    b.Navigation("RecommendedNewConnectionSentences");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.RecommendedNewSecondSentenceEntity", b =>
                {
                    b.Navigation("RecommendedNewConnectionSentences");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.SentenceEntity", b =>
                {
                    b.Navigation("FirstSentencesPairs");

                    b.Navigation("SecondSentencesPairs");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.SentencesPairEntity", b =>
                {
                    b.Navigation("UsingSentencesPairs");
                });

            modelBuilder.Entity("DropWord.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("AutoChatDates");

                    b.Navigation("RecommendedNewConnectionWithUser");

                    b.Navigation("SentencesPairs");

                    b.Navigation("StateTree")
                        .IsRequired();

                    b.Navigation("UserLearningInfo")
                        .IsRequired();

                    b.Navigation("UserSentencesCollections");

                    b.Navigation("UserSettings")
                        .IsRequired();

                    b.Navigation("UsingSentencesPairs");
                });
#pragma warning restore 612, 618
        }
    }
}
